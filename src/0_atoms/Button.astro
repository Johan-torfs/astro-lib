---
interface Props {
    href?: string;
    color?: "primary"| "secondary" | "dark-cyan" | "default";
    rounded?: "none" | "sm" | "md" | "lg" | "full";
    paddingX?: 0|2|4|5|6|8;
    paddingY?: 0|2|4|5|6|8;
}

const { href, color = "default", rounded = "full", paddingX = 5, paddingY = 2 } = Astro.props;

const possibleColors = {
    primary: "bg-primary-950 dark:bg-primary-700 hover:bg-primary-700 dark:hover:bg-primary-400 focus-visible:outline-primary-950 dark:focus-visible:outline-primary-700",
    secondary: "bg-secondary-950 dark:bg-secondary-700 hover:bg-secondary-700 dark:hover:bg-secondary-400 focus-visible:outline-secondary-950 dark:focus-visible:outline-secondary-700",
    default: "bg-primary-600 dark:bg-primary-400 hover:bg-primary-700 dark:hover:bg-primary-300 focus-visible:outline-primary-600 dark:focus-visible:outline-primary-400 dark:text-primary-950",
    'dark-cyan': "bg-dark-cyan-500 dark:bg-dark-cyan-700 hover:bg-dark-cyan-700 dark:hover:bg-dark-cyan-400 focus-visible:outline-dark-cyan-500 dark:focus-visible:outline-dark-cyan-700",
}

const possibleRounded = {
    none: "rounded-none",
    sm: "rounded-sm",
    md: "rounded-md",
    lg: "rounded-lg",
    full: "rounded-full"
}

const possiblePaddingX = {
    0: "px-0",
    2: "px-2",
    4: "px-4",
    5: "px-5",
    6: "px-6",
    8: "px-8",
};

const possiblePaddingY = {
    0: "py-0",
    2: "py-2",
    4: "py-4",
    5: "py-5",
    6: "py-6",
    8: "py-8",
};

const className = `
    ${possibleColors[color]}
    ${possibleRounded[rounded]}
    ${possiblePaddingX[paddingX]}
    ${possiblePaddingY[paddingY]}
`.replace(/\s+/g, ' ').trim();
---

<a
    href={href}
    class:list={["inline-flex items-center justify-center border border-transparent font-medium text-white transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 cursor-pointer leading-none", className]}
>
    <slot/>
</a>